databaseChangeLog:
- changeSet:
    author: Michal Zimmermann <zimmicz@gmail.com>
    id: create-procedure-${schema.name}.update_municipality_statistics
    runOnChange: true
    changes:
    - createProcedure:
        procedureName: update_municipality_statistics
        dbms: postgresql
        procedureBody: |-
            CREATE OR REPLACE FUNCTION ${schema.name}.update_municipality_statistics()
            RETURNS VOID
            AS
            $update_municipality_statistics$
            DECLARE
            BEGIN
                INSERT INTO ${schema.name}.municipality_statistics (
                    code,
                    name,
                    valid_at,
                    total_count,
                    total_area,
                    arable_land_count,
                    arable_land_area,
                    hop_garden_count,
                    hop_garden_area,
                    vineyard_count,
                    vineyard_area,
                    garden_count,
                    garden_area,
                    orchard_count,
                    orchard_area,
                    grassland_count,
                    grassland_area,
                    forest_count,
                    forest_area,
                    waterbody_count,
                    waterbody_area,
                    builtup_area_count,
                    builtup_area_area,
                    other_area_count,
                    other_area_area,
                    agriculture_land_count,
                    agriculture_land_area,
                    agriculture_land_count_ratio,
                    agriculture_land_area_ratio,
                    arable_land_count_ratio,
                    hop_garden_count_ratio,
                    vineyard_count_ratio,
                    garden_count_ratio,
                    orchard_count_ratio,
                    grassland_count_ratio,
                    forest_count_ratio,
                    waterbody_count_ratio,
                    builtup_area_count_ratio,
                    other_area_count_ratio,
                    arable_land_area_ratio,
                    hop_garden_area_ratio,
                    vineyard_area_ratio,
                    garden_area_ratio,
                    orchard_area_ratio,
                    grassland_area_ratio,
                    forest_area_ratio,
                    waterbody_area_ratio,
                    builtup_area_area_ratio,
                    other_area_area_ratio,
                    arable_land_area_average,
                    hop_garden_area_average,
                    vineyard_area_average,
                    garden_area_average,
                    orchard_area_average,
                    grassland_area_average,
                    forest_area_average,
                    waterbody_area_average,
                    builtup_area_area_average,
                    other_area_area_average
                )
                SELECT
                    m.code,
                    m.name,
                    arst.valid_at,
                    SUM(arst.total_count),
                    SUM(arst.total_area),
                    SUM(arst.arable_land_count),
                    SUM(arst.arable_land_area),
                    SUM(arst.hop_garden_count),
                    SUM(arst.hop_garden_area),
                    SUM(arst.vineyard_count),
                    SUM(arst.vineyard_area),
                    SUM(arst.garden_count),
                    SUM(arst.garden_area),
                    SUM(arst.orchard_count),
                    SUM(arst.orchard_area),
                    SUM(arst.grassland_count),
                    SUM(arst.grassland_area),
                    SUM(arst.forest_count),
                    SUM(arst.forest_area),
                    SUM(arst.waterbody_count),
                    SUM(arst.waterbody_area),
                    SUM(arst.builtup_area_count),
                    SUM(arst.builtup_area_area),
                    SUM(arst.other_area_count),
                    SUM(arst.other_area_area),
                    SUM(arst.agriculture_land_count),
                    SUM(arst.agriculture_land_area),
                    AVG(arst.agriculture_land_count_ratio),
                    AVG(arst.agriculture_land_area_ratio),
                    AVG(arst.arable_land_count_ratio),
                    AVG(arst.hop_garden_count_ratio),
                    AVG(arst.vineyard_count_ratio),
                    AVG(arst.garden_count_ratio),
                    AVG(arst.orchard_count_ratio),
                    AVG(arst.grassland_count_ratio),
                    AVG(arst.forest_count_ratio),
                    AVG(arst.waterbody_count_ratio),
                    AVG(arst.builtup_area_count_ratio),
                    AVG(arst.other_area_count_ratio),
                    AVG(arst.arable_land_area_ratio),
                    AVG(arst.hop_garden_area_ratio),
                    AVG(arst.vineyard_area_ratio),
                    AVG(arst.garden_area_ratio),
                    AVG(arst.orchard_area_ratio),
                    AVG(arst.grassland_area_ratio),
                    AVG(arst.forest_area_ratio),
                    AVG(arst.waterbody_area_ratio),
                    AVG(arst.builtup_area_area_ratio),
                    AVG(arst.other_area_area_ratio),
                    AVG(arst.arable_land_area_average),
                    AVG(arst.hop_garden_area_average),
                    AVG(arst.vineyard_area_average),
                    AVG(arst.garden_area_average),
                    AVG(arst.orchard_area_average),
                    AVG(arst.grassland_area_average),
                    AVG(arst.forest_area_average),
                    AVG(arst.waterbody_area_average),
                    AVG(arst.builtup_area_area_average),
                    AVG(arst.other_area_area_average)
                FROM ${schema.name}.area_statistics arst
                JOIN src_ruian.area a ON (arst.code = a.code)
                JOIN src_ruian.municipality m ON (a.municipality_code = m.code)
                WHERE NOT EXISTS (
                    SELECT 1
                    FROM ${schema.name}.municipality_statistics ms
                    WHERE ms.code = m.code
                    AND ms.valid_at = arst.valid_at
                )
                GROUP BY
                    m.code,
                    m.name,
                    arst.valid_at;
            END;
            $update_municipality_statistics$
            LANGUAGE PLPGSQL
            SECURITY DEFINER;
    - rollback:
        DROP FUNCTION IF EXISTS ${schema.name}.update_municipality_statistics();
