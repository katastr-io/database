databaseChangeLog:
- changeSet:
    author: Michal Zimmermann <zimmicz@gmail.com>
    id: create-procedure-${schema.name}.update_county_statistics
    runOnChange: true
    changes:
    - createProcedure:
        procedureName: update_county_statistics
        dbms: postgresql
        procedureBody: |-
            CREATE OR REPLACE FUNCTION ${schema.name}.update_county_statistics(
                v_valid_at date
            )
            RETURNS VOID
            AS
            $update_county_statistics$
            DECLARE
            BEGIN
                INSERT INTO ${schema.name}.county_statistics (
                    code,
                    name,
                    valid_at,
                    total_count,
                    total_area,
                    arable_land_count,
                    arable_land_area,
                    hop_garden_count,
                    hop_garden_area,
                    vineyard_count,
                    vineyard_area,
                    garden_count,
                    garden_area,
                    orchard_count,
                    orchard_area,
                    grassland_count,
                    grassland_area,
                    forest_count,
                    forest_area,
                    waterbody_count,
                    waterbody_area,
                    builtup_area_count,
                    builtup_area_area,
                    other_area_count,
                    other_area_area,
                    agriculture_land_count,
                    agriculture_land_area,
                    agriculture_land_count_ratio,
                    agriculture_land_area_ratio,
                    arable_land_count_ratio,
                    hop_garden_count_ratio,
                    vineyard_count_ratio,
                    garden_count_ratio,
                    orchard_count_ratio,
                    grassland_count_ratio,
                    forest_count_ratio,
                    waterbody_count_ratio,
                    builtup_area_count_ratio,
                    other_area_count_ratio,
                    arable_land_area_ratio,
                    hop_garden_area_ratio,
                    vineyard_area_ratio,
                    garden_area_ratio,
                    orchard_area_ratio,
                    grassland_area_ratio,
                    forest_area_ratio,
                    waterbody_area_ratio,
                    builtup_area_area_ratio,
                    other_area_area_ratio,
                    arable_land_area_average,
                    hop_garden_area_average,
                    vineyard_area_average,
                    garden_area_average,
                    orchard_area_average,
                    grassland_area_average,
                    forest_area_average,
                    waterbody_area_average,
                    builtup_area_area_average,
                    other_area_area_average
                )
                SELECT
                    c.code,
                    c.name,
                    must.valid_at,
                    SUM(must.total_count),
                    SUM(must.total_area),
                    SUM(must.arable_land_count),
                    SUM(must.arable_land_area),
                    SUM(must.hop_garden_count),
                    SUM(must.hop_garden_area),
                    SUM(must.vineyard_count),
                    SUM(must.vineyard_area),
                    SUM(must.garden_count),
                    SUM(must.garden_area),
                    SUM(must.orchard_count),
                    SUM(must.orchard_area),
                    SUM(must.grassland_count),
                    SUM(must.grassland_area),
                    SUM(must.forest_count),
                    SUM(must.forest_area),
                    SUM(must.waterbody_count),
                    SUM(must.waterbody_area),
                    SUM(must.builtup_area_count),
                    SUM(must.builtup_area_area),
                    SUM(must.other_area_count),
                    SUM(must.other_area_area),
                    SUM(must.agriculture_land_count),
                    SUM(must.agriculture_land_area),
                    AVG(must.agriculture_land_count_ratio),
                    AVG(must.agriculture_land_area_ratio),
                    AVG(must.arable_land_count_ratio),
                    AVG(must.hop_garden_count_ratio),
                    AVG(must.vineyard_count_ratio),
                    AVG(must.garden_count_ratio),
                    AVG(must.orchard_count_ratio),
                    AVG(must.grassland_count_ratio),
                    AVG(must.forest_count_ratio),
                    AVG(must.waterbody_count_ratio),
                    AVG(must.builtup_area_count_ratio),
                    AVG(must.other_area_count_ratio),
                    AVG(must.arable_land_area_ratio),
                    AVG(must.hop_garden_area_ratio),
                    AVG(must.vineyard_area_ratio),
                    AVG(must.garden_area_ratio),
                    AVG(must.orchard_area_ratio),
                    AVG(must.grassland_area_ratio),
                    AVG(must.forest_area_ratio),
                    AVG(must.waterbody_area_ratio),
                    AVG(must.builtup_area_area_ratio),
                    AVG(must.other_area_area_ratio),
                    AVG(must.arable_land_area_average),
                    AVG(must.hop_garden_area_average),
                    AVG(must.vineyard_area_average),
                    AVG(must.garden_area_average),
                    AVG(must.orchard_area_average),
                    AVG(must.grassland_area_average),
                    AVG(must.forest_area_average),
                    AVG(must.waterbody_area_average),
                    AVG(must.builtup_area_area_average),
                    AVG(must.other_area_area_average)
                FROM ${schema.name}.municipality_statistics must
                JOIN src_ruian.municipality m ON (must.code = m.code)
                JOIN src_ruian.county c ON (m.county_code = c.code)
                WHERE NOT EXISTS (
                    SELECT 1
                    FROM ${schema.name}.county_statistics cs
                    WHERE cs.code = c.code
                    AND cs.valid_at = must.valid_at
                )
                GROUP BY
                    c.code,
                    c.name,
                    must.valid_at;

                WITH similar_items AS (
                    SELECT
                        d1.code,
                        d1.valid_at,
                        array_agg(json_object('{code, name}'::text[], (concat('{', d2.code, ',', d2.name, '}')::text[]))) alike
                    FROM ${schema.name}.county_statistics d1
                    JOIN LATERAL (
                        SELECT
                            a.code,
                            a.name,
                            a.valid_at,
                            a+b+c+d+e+f+g+h+i+j
                        FROM (
                            SELECT
                                d2.code,
                                d2.name,
                                d2.valid_at,
                                power(d1.hop_garden_area_ratio - d2.hop_garden_area_ratio,2) a,
                                power(d1.forest_area_ratio - d2.forest_area_ratio,2) b,
                                power(d1.arable_land_area_ratio - d2.arable_land_area_ratio,2) c,
                                power(d1.other_area_area_ratio - d2.other_area_area_ratio,2) d,
                                power(d1.orchard_area_ratio - d2.orchard_area_ratio,2) e,
                                power(d1.grassland_area_ratio - d2.grassland_area_ratio,2) f,
                                power(d1.vineyard_area_ratio - d2.vineyard_area_ratio,2) g,
                                power(d1.waterbody_area_ratio - d2.waterbody_area_ratio,2) h,
                                power(d1.garden_area_ratio - d2.garden_area_ratio,2) i,
                                power(d1.builtup_area_area_ratio - d2.builtup_area_area_ratio,2) j
                            FROM ${schema.name}.county_statistics d2
                            WHERE d1.valid_at = d2.valid_at
                                AND d1.valid_at = v_valid_at
                                AND d1.code <> d2.code
                        ) a
                        ORDER BY
                            a.valid_at,
                            a+b+c+d+e+f+g+h+i+j
                        LIMIT 10
                    ) d2 ON true
                    GROUP BY
                        d1.code,
                        d1.valid_at
                )
                UPDATE ${schema.name}.county_statistics
                SET alike = si.alike
                FROM similar_items si
                WHERE county_statistics.valid_at = si.valid_at
                    AND county_statistics.code = si.code;
            END;
            $update_county_statistics$
            LANGUAGE PLPGSQL
            SECURITY DEFINER;
    - rollback:
        DROP FUNCTION IF EXISTS ${schema.name}.update_county_statistics(date);
